name: Docker Build & Push

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      if: github.event_name != 'pull_request'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: github.event_name != 'pull_request'
      continue-on-error: true

  test-docker-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Test Docker image
      run: |
        echo "ðŸ§ª Testing Docker image..."
        docker run --rm \
          -e DJANGO_SECRET_KEY=test-key \
          -e DJANGO_DEBUG=False \
          -e ENVIRONMENT=test \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          python manage.py check
    
    - name: Test with docker-compose
      run: |
        echo "ðŸ§ª Testing with docker-compose..."
        docker-compose -f docker-compose.yml config
      continue-on-error: true

  deploy-docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [test-docker-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: docker-production
      url: https://yourdomain.com
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying Docker image to production..."
        echo "Add deployment commands here:"
        echo "- SSH to server and pull new image"
        echo "- Update docker-compose.yml"
        echo "- Run docker-compose up -d"
        echo "- Or deploy to Kubernetes cluster"
        # Example:
        # ssh user@server 'cd /app && docker-compose pull && docker-compose up -d'
