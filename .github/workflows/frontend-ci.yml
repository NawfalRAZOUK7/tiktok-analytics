name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
    
    - name: Verify Flutter installation
      run: |
        flutter --version
        flutter doctor -v
    
    - name: Get dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Verify dependencies
      working-directory: ./frontend
      run: flutter pub outdated
      continue-on-error: true
    
    - name: Analyze code
      working-directory: ./frontend
      run: flutter analyze
    
    - name: Check formatting
      working-directory: ./frontend
      run: dart format --set-exit-if-changed .
      continue-on-error: true
    
    - name: Run tests
      working-directory: ./frontend
      run: flutter test --coverage
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
      continue-on-error: true

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Build web (development)
      working-directory: ./frontend
      run: |
        flutter build web \
          --release \
          --dart-define=ENVIRONMENT=development \
          --dart-define=API_BASE_URL=https://api-dev.yourdomain.com/api
    
    - name: Upload web build artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-build-development
        path: frontend/build/web/
        retention-days: 7

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'gradle'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Build Android APK (development)
      working-directory: ./frontend
      run: |
        flutter build apk \
          --release \
          --dart-define=ENVIRONMENT=development \
          --dart-define=API_BASE_URL=https://api-dev.yourdomain.com/api
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-development
        path: frontend/build/app/outputs/flutter-apk/app-release.apk
        retention-days: 7

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [test]
    if: false  # Disabled by default - requires Apple Developer account & certificates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Build iOS (development)
      working-directory: ./frontend
      run: |
        flutter build ios \
          --release \
          --no-codesign \
          --dart-define=ENVIRONMENT=development \
          --dart-define=API_BASE_URL=https://api-dev.yourdomain.com/api

  deploy-web-staging:
    name: Deploy Web to Staging
    runs-on: ubuntu-latest
    needs: [build-web]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: frontend-staging
      url: https://staging-app.yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download web build
      uses: actions/download-artifact@v4
      with:
        name: web-build-development
        path: frontend/build/web/
    
    - name: Deploy to Firebase Hosting (staging)
      run: |
        echo "ðŸš€ Deploying web app to staging..."
        # Example: Firebase deployment
        # npm install -g firebase-tools
        # firebase deploy --only hosting:staging --token ${{ secrets.FIREBASE_TOKEN }}
    
    - name: Deploy to Netlify (alternative)
      run: |
        echo "Alternative: Deploy to Netlify staging"
        # npm install -g netlify-cli
        # netlify deploy --dir=frontend/build/web --auth ${{ secrets.NETLIFY_TOKEN }}

  deploy-web-production:
    name: Deploy Web to Production
    runs-on: ubuntu-latest
    needs: [build-web]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: frontend-production
      url: https://app.yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Get dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Build web (production)
      working-directory: ./frontend
      run: |
        flutter build web \
          --release \
          --dart-define=ENVIRONMENT=production \
          --dart-define=API_BASE_URL=${{ secrets.PRODUCTION_API_URL }}
    
    - name: Deploy to Firebase Hosting (production)
      run: |
        echo "ðŸš€ Deploying web app to production..."
        # Example: Firebase deployment
        # npm install -g firebase-tools
        # firebase deploy --only hosting:production --token ${{ secrets.FIREBASE_TOKEN }}
    
    - name: Deploy to Netlify (alternative)
      run: |
        echo "Alternative: Deploy to Netlify production"
        # npm install -g netlify-cli
        # netlify deploy --dir=frontend/build/web --prod --auth ${{ secrets.NETLIFY_TOKEN }}
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: frontend-v${{ github.run_number }}
        release_name: Frontend Release ${{ github.run_number }}
        draft: false
        prerelease: false
      continue-on-error: true

  deploy-android:
    name: Deploy Android to Play Store
    runs-on: ubuntu-latest
    needs: [build-android]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && false  # Disabled by default
    environment:
      name: android-production
      url: https://play.google.com/store/apps/details?id=com.yourcompany.tiktokanalytics
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: android-apk-development
    
    - name: Deploy to Play Store
      run: |
        echo "ðŸš€ Deploying to Google Play Store..."
        # Requires: Google Play Console service account JSON
        # Use: r0adkll/upload-google-play@v1
